Readme for Sprint 1 


1. Project Overview
The objective of this project is to develop a generative AI powered chatbot that allows hospital staff and supply chain managers to ask questions about historical and current purchase order data. The chatbot will convert these queries to SQL and retrieve relevant data from the azure SQL database and return useful and clear analytical insights. Currently it will support standalone operation but in the future will be integrated into MedMine’s existing SAAS platform. 


Business Goal: The primary goal is to streamline the data access and decision making by allowing non technical users to interact directly with complex data through simple text queries. 

2. Target Users
Chatbot will be primarily used by hospital supply managers.
They are responsible for ensuring the hospital has all the necessary supplies in stock at the correct time and within the given budget. Their goals include making fast, informed purchasing decisions, monitoring trends over time, and identifying cost-saving opportunities.
Pain points:
Limited technical training.
Reliance on manual spreadsheets and static reports, which are time consuming to navigate.
Delays when waiting on the IT or analytics team to generate product insights.

Natural Language Understanding: The chatbot must accept and interpret questions typed in plain English.
SQL Queries: User queries should be automatically translated into correct SQL statements.
Azure SQL Execution: The chatbot will be connected to MedMine’s Azure SQL database in order to run queries in real time.
Response Generation: Results should be in easily readable format.
Unclear Questions Handling: If a question is unclear, the chatbot will ask follow-up questions to narrow down the query.



3. Core Functional Requirements
Natural Language Understanding: The chatbot must accept and interpret questions typed in plain English.
SQL Queries: User queries should be automatically translated into correct SQL statements.
Azure SQL Execution: The chatbot will be connected to MedMine’s Azure SQL database in order to run queries in real time.
Response Generation: Results should be in easily readable format.
Unclear Questions Handling: If a question is unclear, the chatbot will ask follow-up questions to narrow down the query.
User Feedback System: Include a rating system for users to provide feedback responses to improve accuracy over time.
Interaction Logging: Every query and response should be securely logged.


4. Non-Functional Requirements
Response time: The chatbot must have a good response time (We are aiming for under 5 seconds) for the majority of the queries to ensure a smooth experience. 


Scalability: The chatbot must be capable of supporting multiple current users without degradation in performance with architecture to scale in the future. 


Reliability: Since there is going to be a delay in weekly data, The chatbot needs to be able to handle the ingestion gracefully. 


Accuracy: The text to SQL component must generate correct SQL output of the validated queries. (We cannot confirm an accuracy score at this point) 



5. Integration Requirements
The chatbot is to be designed for a seamless integration into the Saas software and align with the platform's system design and the authentication flow. 


The chatbot should be built with future support for real time data ingestion, specifically handling the data updates and accommodating the late reporting clients. 

6. Technology Stack
Frontend: React (for UI integration) 


Backend: FastAPI (Python)


Model: OpenAI GPT-4 (via API)


Database: Azure SQL


Hosting: Azure App Services or equivalent




8. Constraints
MVP will be developed using only the sample purchase order data from between 2018 and 2020. This constraint ensures the experimentation safety during the development and avoids unnecessary risks
Chatbot must correctly identify missing, inconsistent, or delayed data. Responses should account for gaps and provide disclaimers when data is incomplete or corrupted.
Chatbot’s main focus is on analytics and data querying rather than being a general-purpose customer support assistant.




Research 

Carlander-Reuterfelt, D., Carrera, Á., Iglesias, C. A., Araque, Ó., Sánchez Rada, J. F., & Muñoz, S. (2020). JAICOB: A data science chatbot. IEEE Access, 8, 180672–180680. https://doi.org/10.1109/ACCESS.2020.3024795
Description: This research paper goes over how to process user queries using NLP to retrieve and show data from its knowledge base. 
	Advantage: Provides timely and reliable information/answers.
Disadvantage:  Poorly framed questions will challenge the NLP capabilities of the model. 


Aleedy, M., Shaiba, H., & Bezbradica, M. (2019).
 Generating and analyzing chatbot responses using natural language processing. International Journal of Advanced Computer Science and Applications (IJACSA), 10(9). https://doras.dcu.ie/27514/
Description: development of a customer support chatbot using deep learning and NLP techniques such as LSTM, GRU, and CNN. It focuses on generating conversational responses through sequence-to-sequence learning. 
Advantage: LSTM and GRU models were shown to be effective at generating meaningful, emotionally appropriate responses, making them well-suited for customer interaction. 
Disadvantage:
 Models struggled with generating accurate responses to highly specific, informative queries. Training and inference also required significant computational resources, with LSTM being particularly time-consuming.


Readme for Sprint 1 


1. Project Overview
The objective of this project is to develop a generative AI powered chatbot that allows hospital staff and supply chain managers to ask questions about historical and current purchase order data. The chatbot will convert these queries to SQL and retrieve relevant data from the azure SQL database and return useful and clear analytical insights. Currently it will support standalone operation but in the future will be integrated into MedMine’s existing SAAS platform. 


Business Goal: The primary goal is to streamline the data access and decision making by allowing non technical users to interact directly with complex data through simple text queries. 



4. Non-Functional Requirements
Response time: The chatbot must have a good response time (We are aiming for under 5 seconds) for the majority of the queries to ensure a smooth experience. 


Scalability: The chatbot must be capable of supporting multiple current users without degradation in performance with architecture to scale in the future. 


Reliability: Since there is going to be a delay in weekly data, The chatbot needs to be able to handle the ingestion gracefully. 


Accuracy: The text to SQL component must generate correct SQL output of the validated queries. (We cannot confirm an accuracy score at this point) 



5. Integration Requirements
The chatbot is to be designed for a seamless integration into the Saas software and align with the platform's system design and the authentication flow. 


The chatbot should be built with future support for real time data ingestion, specifically handling the data updates and accommodating the late reporting clients. 

6. Technology Stack
Frontend: React (for UI integration) 


Backend: FastAPI (Python)


Model: OpenAI GPT-4 (via API)


Database: Azure SQL


Hosting: Azure App Services or equivalent





Research 

Carlander-Reuterfelt, D., Carrera, Á., Iglesias, C. A., Araque, Ó., Sánchez Rada, J. F., & Muñoz, S. (2020). JAICOB: A data science chatbot. IEEE Access, 8, 180672–180680. https://doi.org/10.1109/ACCESS.2020.3024795
Description: This research paper goes over how to process user queries using NLP to retrieve and show data from its knowledge base. 
	Advantage: Provides timely and reliable information/answers.
Disadvantage:  Poorly framed questions will challenge the NLP capabilities of the model. 


Aleedy, M., Shaiba, H., & Bezbradica, M. (2019).
 Generating and analyzing chatbot responses using natural language processing. International Journal of Advanced Computer Science and Applications (IJACSA), 10(9). https://doras.dcu.ie/27514/
Description: development of a customer support chatbot using deep learning and NLP techniques such as LSTM, GRU, and CNN. It focuses on generating conversational responses through sequence-to-sequence learning. 
Advantage: LSTM and GRU models were shown to be effective at generating meaningful, emotionally appropriate responses, making them well-suited for customer interaction. 
Disadvantage:
 Models struggled with generating accurate responses to highly specific, informative queries. Training and inference also required significant computational resources, with LSTM being particularly time-consuming.






Xiao's commit

Product Owner Feedback 

Summary of the Feedback given by Product Owner/Sponsor
Project-plan depth: Provide a formal project plan with clear timelines, milestones, and ownership; keep overall duration within ~10–12 weeks.
Data & Environment:
Sponsor will supply sample PO data (3–4 years) + data dictionary next week.
The team should mirror production: load data into Azure SQL, set up an ADF/ETL pipeline for ingestion.
Scope & Priorities:
Focus first on core chatbot capability—answering supply-chain spend questions from the facility’s own data.
UI limited to the chat interface only, not the full SaaS front-end.
Charts in responses are desirable if achievable via prompt engineering.
Multi-user scalability is required; feedback collection is “nice-to-have” if time permits.
Integration & IP:
Integration with the existing SaaS product remains in scope; NDA/IP agreements must be signed before real data is used.
Collaboration logistics:
All artifacts to reside in the shared Google Drive; highlight areas where business input is needed for sponsor comments.
Description of Team Response to Feedback
Accepted actions:
Will convert the current task list into a detailed, timeline-driven project plan and upload to the shared drive before Sprint 1 review.
Agreed to rotate roles but keep named ownership for accountability; will reflect this in the plan.
Confirmed focus on core Q&A functionality first; feedback mechanism and advanced recommendations deferred until core is stable.
Will set up Azure SQL + ADF pipeline prototype as soon as sample data arrives.
Committed to sign NDA/IP agreements immediately upon receipt to enable data access.
Next-steps scheduled:
Book follow-up meeting for architecture review once the plan is ready.
Await sponsor’s sample data and data dictionary for ingestion work.



Team Process Improvements
We are getting better at keeping the github and taiga board updated and getting better at communicating with each other as well as the sponsor. This sprint helped us get better at communicating and working together as a group and helping each other out whenever needed. We also have a discord set up which helped us a lot to communicate as well as having meetings with our sponsor to answer any questions we had. 

